%Quadtree test

ss = stateSpaceSE2;
clear nodes
sv = validatorOccupancyMap(ss);

 mapsize=25.6;
 start=[1 1 0];
 goal=[24 24 0];
res=10;    %resolution cells/meter
minRes=4;
minResFrame=minRes;

load exampleMaps.mat


%map_binary=[[ones(8,48);[ones(32,8) [[ones(8) zeros(8);zeros(8) ones(8)] [[ones(4) ones(4);zeros(4) zeros(4)] ones(8);ones(8) zeros(8)];ones(16) zeros(16)] ones(32,8)];ones(8,48)], ones(48,16);ones(16,64)];
map_binary=logical(imresize([complexMap; flipud(complexMap(end-11:end,:))],[256,256],'nearest'));
%map_binary =[complexMap ones(41,12);ones(23,64)];
%map_binary=mapCreator(mapsize,start,goal,res);
%map_binary= [zeros(24,32);ones(8,32)];



map=occupancyMap(map_binary,res);
sv.Map = map;
sv.ValidationDistance = 0.001;

tic

states=getstatesfrommap(map);
tic
[nodes] = createFramedQuadtree(states,map_binary,minRes,minResFrame);

path=A_Star(nodes,start,goal);

t=toc;


disp('Quadtree plotten:')
tic
figure
map.show
hold on
plot(nodes.states(:,1),nodes.states(:,2),'or')
%plotEdges(nodes.states,nodes.neighboursSameFrame,nodes.realNeighboursEqual);
plot(path(:,1),path(:,2),'-gx','LineWidth',2)
title(strcat('Planungsdauer: ',num2str(t),' s'));
toc



